county = factor(county, levels = .$county))
ggplot(illinois, aes(percollege, county, color = Above)) +
geom_segment(aes(x = Avg, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
head(midwest)
illinois_top25 <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(25) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
ggplot(illinois_top25, aes(percollege, county)) +
geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
illinois <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(percollege) %>%
mutate(Avg = mean(percollege, na.rm = TRUE),
Above = ifelse(percollege - Avg > 0, TRUE, FALSE),
county = factor(county, levels = .$county))
ggplot(illinois, aes(percollege, county, color = Above)) +
geom_segment(aes(x = Avg, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
head(midwest)
illinois_top25 <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(25) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
ggplot(illinois_top25, aes(percollege, county)) +
geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
illinois <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(percollege) %>%
mutate(Avg = mean(percollege, na.rm = TRUE),
Above = ifelse(percollege - Avg > 0, TRUE, FALSE),
county = factor(county, levels = .$county))
ggplot(illinois, aes(percollege, county, color = Above)) +
geom_segment(aes(x = Avg, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
head(midwest)
illinois_top25 <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(25) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
ggplot(illinois_top25, aes(percollege, county)) +
geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
illinois <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(percollege) %>%
mutate(Avg = mean(percollege, na.rm = TRUE),
Above = ifelse(percollege - Avg > 0, TRUE, FALSE),
county = factor(county, levels = .$county))
ggplot(illinois, aes(percollege, county, color = Above)) +
geom_segment(aes(x = Avg, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
head(midwest)
illinois_top10 <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(10) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
ggplot(illinois_top10, aes(percollege, county)) +
geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
illinois <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(percollege) %>%
mutate(Avg = mean(percollege, na.rm = TRUE),
Above = ifelse(percollege - Avg > 0, TRUE, FALSE),
county = factor(county, levels = .$county))
ggplot(illinois, aes(percollege, county, color = Above)) +
geom_segment(aes(x = Avg, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
View(forestfires.s)
?scale
?sqrt
?root
ggplot(forestfires, aes(month, temp)) +
geom_jitter()
ggplot(forestfires, aes(month, temp), main = "Temperature (by Month)") +
geom_jitter()
ggplot(forestfires, aes(month, temp)) + ggtitle(Forest Fire Temperature (by Month))
ggplot(forestfires, aes(month, temp)) + ggtitle("Forest Fire Temperature (by Month)")
geom_jitter()
ggplot(forestfires, aes(month, temp))
ggtitle("Forest Fire Temperature (by Month)")
geom_jitter()
ggplot(forestfires, aes(month, temp)) + ggtitle("Forest Fire Temperature (by Month)")
geom_jitter()
ggplot(forestfires, aes(month, temp)) + ggtitle("Forest Fire Temperature (by Month)")+
geom_jitter()
# sorting data by month
forestfires$day <- with(forestfires, reorder(month, temp))
# individual statistics are scaled so that they are displayed nicely on heatmap
forestfires.s <- ddply(forestfires.m, .(variable), transform, rescale = sqrt(value))
last_plot() %+% forestfires.s
# create heatmap using ggplot2
ggplot(forestfires.s, aes(variable, month)) + geom_tile(aes(fill = rescale),
color = "white") + ggtitle("Forest Fire Characteristics in Montesinho Park") + scale_fill_gradient2(low = "black", high = "red")
# create heatmap using ggplot2
ggplot(forestfires.s, aes(variable, month)) + geom_tile(aes(fill = rescale),
color = "white") + ggtitle("Forest Fire Characteristics in Montesinho Park") + scale_fill_gradient2(low = "black", high = "red")
# creating a jitter geom with the same forest fire data set
ggplot(forestfires, aes(month, temp)) + ggtitle("Forest Fire Temperature (by Month)") +
geom_jitter()
# loading packages for spatial plotting
library(ggmap)
# loading packages for spatial plotting
install.packages(ggmap)
library(ggmap)
# loading packages for spatial plotting
library(ggmap)
# loading fundamental packages
library(ggplot2)
library(dplyr)
library(readr)
library(ggmap)
# loading packages for spatial plotting
library("ggmap")
# loading packages for spatial plotting
library(maps)
# loading packages for spatial plotting
library(ggmap)
# loading packages for spatial plotting
library(ggmap)
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# loading packages for spatial plotting
library(ggplot2)
library(ggmap)
# loading packages for spatial plotting
library(maps)
library("maps")
install.packages("ggmaps")
install.packages("ggmap")
install.packages("ggalt")
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 12, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 12, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 12, source = "google", maptype = "hybrid")
# open street map
seoul_osm_map <- qmap("seoul", zoom = 12, source = "osm")
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 12, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 12, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 12, source = "google", maptype = "hybrid")
# open street map
seoul_osm_map <- qmap("seoul", zoom = 12, source = "osm")
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 12, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 12, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 12, source = "google", maptype = "hybrid")
# open street map
seoul_osm_map <- qmap("seoul", zoom = 12, source = "google", maptype = "osm")
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 12, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 12, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 12, source = "google", maptype = "hybrid")
# get coordinates for places in seoul
seoul_places <- c("Namsan",
"Gyeongbukgung",
"N Seoul Tower",
"Myeong-dong")
# get longitudes and latitudes of places in seoul
places_loc <- geocode(seoul_places)
# google road map of seoul
seoul_road_map + geom_point(aes(x=lon, y=lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "pink") +
geom_encircle(aes(x=lon, y=lat),
data = places_loc, size = 2, color = "blue")
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 12, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 12, source = "google", maptype = "roadmap")
head(midwest)
head(east)
head(midwest)
illinois_top10 <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(10) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
ggplot(illinois_top10, aes(percollege, county)) +
geom_segment(aes(x = 0, y = county, xend = per college, yend = county), color = "grey50") +
head(midwest)
illinois_top10 <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(10) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
ggplot(illinois_top10, aes(percollege, county)) +
geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
head(midwest)
illinois_top10 <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(10) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
ggplot(illinois_top10, aes(percollege, county)) +
ggtitle("Number of Colleges in Top 10 Illinois Counties")
geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
head(midwest)
illinois_top10 <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(10) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
ggplot(illinois_top10, aes(percollege, county)) +
ggtitle("Number of Colleges in Top 10 Illinois Counties") +
geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
illinois <- midwest %>%
filter(state == "IL") %>%
select(county, percollege) %>%
arrange(percollege) %>%
mutate(Avg = mean(percollege, na.rm = TRUE),
Above = ifelse(percollege - Avg > 0, TRUE, FALSE),
county = factor(county, levels = .$county))
ggplot(illinois, aes(percollege, county, color = Above)) +
ggtitle("Number of Colleges in Top 10 Illinois Counties") +
geom_segment(aes(x = Avg, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
install.packages(forecast)
install.packages("forecast")
library(forecast)
theme_set(theme_classic())
campuscrimes <- read_csv("data/ca_offenses_by_campus.csv")
ggseasonplot(campuscrimes) + labs(title="Seasonal plot: International Airline Passengers")
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 13, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 13, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 13, source = "google", maptype = "hybrid")
# get coordinates for places in seoul
seoul_places <- c("Namsan",
"Gyeongbukgung",
"N Seoul Tower",
"Myeong-dong")
# get longitudes and latitudes of places in seoul
places_loc <- geocode(seoul_places)
# google road map of seoul
seoul_road_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red")
+ geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 13, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 13, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 13, source = "google", maptype = "hybrid")
# get coordinates for places in seoul
seoul_places <- c("Namsan",
"Gyeongbukgung",
"N Seoul Tower",
"Myeong-dong")
# get longitudes and latitudes of places in seoul
places_loc <- geocode(seoul_places)
# google road map of seoul
seoul_road_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red")
+ geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
# google hybrid map of seoul
seoul_hybrid_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red")
+ geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 13, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 13, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 13, source = "google", maptype = "hybrid")
# get coordinates for places in seoul
seoul_places <- c("Namsan",
"Gyeongbukgung",
"N Seoul Tower",
"Myeong-dong")
# get longitudes and latitudes of places in seoul
places_loc <- geocode(seoul_places)
# google road map of seoul
seoul_road_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red")
+ geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
View(places_loc)
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 13, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 13, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 13, source = "google", maptype = "hybrid")
# get coordinates for places in seoul
seoul_places <- c("Namsan",
"Gyeongbukgung",
"N Seoul Tower",
"Myeong-dong")
# get longitudes and latitudes of places in seoul
places_loc <- geocode(seoul_places)
# google road map of seoul
seoul_road_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red")
+ geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
seoul_sat_map <- qmap("seoul", zoom = 13, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 13, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 13, source = "google", maptype = "hybrid")
# get coordinates for places in seoul
seoul_places <- c("Namsan",
"Gyeongbukgung",
"N Seoul Tower",
"Myeong-dong")
# get longitudes and latitudes of places in seoul
places_loc <- geocode(seoul_places)
# google road map of seoul
seoul_road_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red") + geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
# google hybrid map of seoul
seoul_hybrid_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red")
+ geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
# google hybrid map of seoul
seoul_hybrid_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red")
+ geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
# google hybrid map of seoul
seoul_hybrid_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red") + geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
head(midwest)
michigan_top20 <- midwest %>%
filter(state == "MI") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(20) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
head(midwest)
michigan_top20 <- midwest %>%
filter(state == "MI") %>%
select(county, percollege) %>%
arrange(desc(percollege)) %>%
top_n(20) %>%
arrange(percollege) %>%
mutate(county = factor(county, levels = .$county))
ggplot(michigan_top20, aes(percollege, county)) +
ggtitle("Top 20 Counties in Michigan for % of College Educated People") +
geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = "grey50") +
geom_point()
michigan <- midwest %>%
filter(state == "MI") %>%
select(county, percollege) %>%
arrange(percollege) %>%
mutate(avg = mean(percollege, na.rm = TRUE),
above = ifelse(percollege - avg > 0, TRUE, FALSE),
county = factor(county, levels = .$county))
head(michigan)
# loading packages for spatial plotting
library(ggmap)
library(ggalt)
# get Seoul's longitude and latitude coordinates
seoul <-  geocode("Seoul")
# get the map
# google satellite map
# zoom is used to zoom into or out of the chart, source causes R to accept its input from the map connection, maptype indicates which type of map is to be displayed
seoul_sat_map <- qmap("seoul", zoom = 13, source = "google", maptype = "satellite")
# google road map
seoul_road_map <- qmap("seoul", zoom = 13, source = "google", maptype = "roadmap")
# google hybrid map
seoul_hybrid_map <- qmap("seoul", zoom = 13, source = "google", maptype = "hybrid")
# get coordinates for tourist places in seoul
seoul_places <- c("Namsan",
"Gyeongbukgung",
"N Seoul Tower",
"Myeong-dong")
# get longitudes and latitudes of places in seoul
places_loc <- geocode(seoul_places)
# google road map of seoul
seoul_road_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red") + geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
# google hybrid map of seoul
seoul_hybrid_map + geom_point(aes(x = lon, y = lat),
data = places_loc,
alpha = 0.7,
size = 7,
color = "red") + geom_encircle(aes(x = lon, y = lat), data = places_loc, size = 2, color = "blue")
